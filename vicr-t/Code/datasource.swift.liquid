{% include 'header' -%}{% include 'parameters' -%}

{{ ui_imports -}}

final class {{ module_info.name }}TableDataSource: NSObject
{
    var data: [{{ DomainModel }}]?
    
    func update(data: [{{ DomainModel }}]?)
    {
        self.data = data
    }
    
    func item(forIndexPath indexPath: IndexPath) -> {{ DomainModel }}?
    {
        let row = indexPath.row
        guard let data = data, data.indices.contains(row) else { return nil }
        return data[row]
    }
}

extension {{ module_info.name }}TableDataSource: UITableViewDataSource
{
    // MARK: Sections
    func numberOfSections(in tableView: UITableView) -> Int
    {
        return 1
    }
    
    // MARK: Rows
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
    {
        return data?.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
    {
        guard let item = item(forIndexPath: indexPath),
            let cell = tableView.dequeueReusableCell(withIdentifier: {{ module_info.name }}TableViewCell.reuseIdentifier) as? {{ module_info.name }}TableViewCell
        else { return UITableViewCell() }
        
        cell.fill(withData: item)
        return cell
    }
}
